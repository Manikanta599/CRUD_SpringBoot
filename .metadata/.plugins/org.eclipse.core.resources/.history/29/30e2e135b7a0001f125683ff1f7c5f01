package com.website.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.website.dao.ApiResponse;
import com.website.model.AuthEntity;
import com.website.service.AuthService;

import org.springframework.http.ResponseEntity;

@RestController
@RequestMapping("auth")
public class AuthController {
    
    @Autowired
    private AuthService authService;
    
    @PostMapping("/register")
    public ResponseEntity<ApiResponse<AuthEntity>> registerUser(@RequestBody AuthEntity authEntity) {
        try {
            authService.registerUser(authEntity); // Register user
            ApiResponse<AuthEntity> response = new ApiResponse<>(
                    "User registered successfully!", 
                    0, 
                    true, 
                    authEntity // Passing AuthEntity as the data
            );
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (Exception e) {
            // Returning response with `null` for data but keeping the type consistent (AuthEntity)
            ApiResponse<AuthEntity> response = new ApiResponse<>(
                    "User registration failed.", 
                    1, 
                    false, 
                    null // No data in case of failure
            );
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
        }
    }

    
    @PostMapping("/login")
    public ResponseEntity<ApiResponse<AuthEntity>> loginUser(@RequestBody LoginReqDTO loginRequest) {
    	// Get email and password from the request body
        String email = loginRequest.getEmail();
        String password = loginRequest.getPassword();

        // Authenticate user
        AuthEntity user = authService.loginUser(email, password);
        if (user != null) {
            ApiResponse<AuthEntity> response = new ApiResponse<>(
                    "Login successful!",
                    0,
                    true,
                    user
            );
            return ResponseEntity.ok(response);
        } else {
            ApiResponse<AuthEntity> response = new ApiResponse<>(
                    "Invalid credentials.",
                    1,
                    false,
                    null
            );
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
        }
    }
}
